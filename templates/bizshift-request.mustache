/* eslint-disable */
/*
 * this code generated by swagger-codegen
 */
import axios from 'axios';
import qs from 'qs';
import { assign, isEmpty } from 'lodash';

export const getDomain = (parameters) => {
  return parameters.$domain ? parameters.$domain : process.env.API_ORIGIN_VERSION;
};

export const getConfig = (parameters) => {
  return parameters.$config ? parameters.$config : {};
};

export const request = (method, url, queryParameters, form, config) => {
  method = method.toLowerCase();
  let keys = Object.keys(queryParameters);
  let queryUrl = url;
  if (keys.length > 0) {
    queryUrl = url + '?' + qs.stringify(queryParameters);
  }

  const defaultConfig = {
    method: method,
    responseType: 'json',
    withCredentials: true,
    headers: { 'X-Requested-With': 'XMLHttpRequest' }
  };

  let mergedConfig;
  if(isEmpty(form)) {
    mergedConfig = assign(defaultConfig, config);
  } else {
    mergedConfig = assign({data: form}, defaultConfig, config);
  }
  return axios(queryUrl, mergedConfig)
};

function mergeQueryParams(parameters, queryParameters) {
  if (parameters.$queryParameters) {
    Object.keys(parameters.$queryParameters)
      .forEach(function(parameterName) {
        let parameter = parameters.$queryParameters[parameterName];
        queryParameters[parameterName] = parameter;
      });
  }
  return queryParameters;
}

{{#methods}}
  {{> method}}
{{/methods}}
